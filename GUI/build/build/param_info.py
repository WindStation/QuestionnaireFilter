# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage, StringVar, messagebox
from util.HighDPI import set_dpi_awareness
from processing.Filter import Filter
from GUI.build.build import filter_success, filter_fail
from GUI.build.build.query import query_param
from util.JsonIO import write_json

set_dpi_awareness()

# OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = Path(r"GUI\build\build\assets\frame3")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


def start_window(filename, filter: Filter):
    """
    到该页面，filter不可能是None（除非是测试时），因此省去filter初始化
    :param filename: 完整路径文件名
    :param filter: 筛选器
    :return: None
    """
    # TODO: 这里要加个参数Filter，从前面调用的时候传过来，并且先解析一下，设置对应的指示灯
    # TODO: 最好还设置一个complete，同步指示灯的情况，用作最后判断

    window = Tk()

    window.geometry("1200x740")
    window.configure(bg="#FFFFFF")
    window.title("填写筛选条件参数")

    questions = filter.questionnaire_obj.questions

    canvas = Canvas(
        window,
        bg="#FFFFFF",
        height=740,
        width=1200,
        bd=0,
        highlightthickness=0,
        relief="ridge"
    )

    canvas.place(x=0, y=0)
    canvas.create_rectangle(
        0.0,
        0.0,
        1200.0,
        100.0,
        fill="#326199",
        outline="")

    # 先放五个指示灯
    dot_1 = canvas.create_text(
        619.0,
        151.0,
        anchor="nw",
        text="·",
        fill="#FF0000",
        font=("Microsoft YaHei", 128 * -1)
    )

    dot_2 = canvas.create_text(
        940.0,
        151.0,
        anchor="nw",
        text="·",
        fill="#FF0000",
        font=("Microsoft YaHei", 128 * -1)
    )
    dot_3 = canvas.create_text(
        724.0,
        286.0,
        anchor="nw",
        text="·",
        fill="#FF0000",
        font=("Microsoft YaHei", 128 * -1)
    )

    dot_4 = canvas.create_text(
        724.0,
        351.0,
        anchor="nw",
        text="·",
        fill="#FF0000",
        font=("Microsoft YaHei", 128 * -1)
    )

    dot_5 = canvas.create_text(
        663.0,
        430.0,
        anchor="nw",
        text="·",
        fill="#FF0000",
        font=("Microsoft YaHei", 128 * -1)
    )

    # 然后做初始化和检查
    param_dict = {
        "MaxTime": filter.max_time,
        "MinTime": filter.min_time,
        "ForcedItem": filter.forced_item,
        "RepeatItem": filter.repeat_item,
        "SamePercent": filter.same_percent
    }
    complete_set = {}  # 这个用来判断每一项是否完成
    for key in param_dict.keys():
        complete_set[key] = True if param_dict[key] is not None else False

    # 然后初始化指示灯状态
    canvas.itemconfig(dot_1, fill="#00FF00" if complete_set["MaxTime"] else "#FF0000")
    canvas.itemconfig(dot_2, fill="#00FF00" if complete_set["MinTime"] else "#FF0000")
    canvas.itemconfig(dot_3, fill="#00FF00" if complete_set["ForcedItem"] else "#FF0000")
    canvas.itemconfig(dot_4, fill="#00FF00" if complete_set["RepeatItem"] else "#FF0000")
    canvas.itemconfig(dot_5, fill="#00FF00" if complete_set["SamePercent"] else "#FF0000")

    canvas.create_text(
        121.0,
        25.0,
        anchor="nw",
        text="Metric",
        fill="#FFFFFF",
        font=("Consolas", 40 * -1)
    )

    canvas.create_rectangle(
        24.0,
        128.0,
        373.0,
        713.0,
        fill="#326299",
        outline="")

    canvas.create_text(
        38.0,
        162.0,
        width=321,
        anchor="nw",
        text="问卷筛选 · 说明：\n\n在此界面，你需要完成以下筛选条件参数的填写：\n 1. 允许的最长作答时间\n 2. 允许的最短作答时间\n 3. 强制题及正确选项\n 4. 重复题\n 5. 选项重复率上限\n\n每完成一项选择或填写，其后面的指示灯会变为绿色。全部选择完毕后，可以继续进行下一步。",
        fill="#FFFFFF",
        font=("Microsoft YaHei", 20 * -1)
    )

    canvas.create_text(
        47.0,
        605.0,
        anchor="nw",
        text="Designed & Developed By",
        fill="#FFFFFF",
        font=("Consolas Bold", 24 * -1)
    )

    canvas.create_text(
        126.0,
        650.0,
        anchor="nw",
        text="WindStation",
        fill="#FFFFFF",
        font=("Consolas Bold", 24 * -1)
    )

    percent_var = StringVar()  # 这个用于保存重复率填写情况
    # 初始化
    if complete_set["SamePercent"]:
        percent_var.set(str(param_dict["SamePercent"]))

    def check_percent():
        try:
            _ = float(percent_var.get())
        except ValueError:
            # 填写的不是浮点数
            canvas.itemconfig(dot_5, fill="#FF0000")
            complete_set["SamePercent"] = False
            param_dict["SamePercent"] = None
            return
        param_dict["SamePercent"] = float(percent_var.get())
        complete_set["SamePercent"] = True
        canvas.itemconfig(dot_5, fill="#00FF00")

    percent_var.trace("w", lambda *args: check_percent())

    entry_image_1 = PhotoImage(
        file=relative_to_assets("entry_1.png"))
    entry_bg_1 = canvas.create_image(
        592.0,
        581.5,
        image=entry_image_1
    )
    entry_percent = Entry(
        bd=0,
        bg="#E6E6E6",
        fg="#000716",
        highlightthickness=0,
        textvariable=percent_var
    )
    entry_percent.place(
        x=542.0,
        y=557.0,
        width=100.0,
        height=47.0
    )

    canvas.create_text(
        516.0,
        358.0,
        anchor="nw",
        text="选择强制题及答案",
        fill="#000000",
        font=("Microsoft YaHei", 24 * -1)
    )

    canvas.create_text(
        566.0,
        424.0,
        anchor="nw",
        text="选择重复题",
        fill="#000000",
        font=("Microsoft YaHei", 24 * -1)
    )

    canvas.create_text(
        530.0,
        503.0,
        anchor="nw",
        text="重复率上限",
        fill="#000000",
        font=("Microsoft YaHei", 24 * -1)
    )

    canvas.create_text(
        671.0,
        568.0,
        anchor="nw",
        text="填写一个0~1之间的实数",
        fill="#000000",
        font=("Microsoft YaHei", 20 * -1)
    )

    # 保存时间上下限的变量，用于监听
    time_upper_var = StringVar()
    time_lower_var = StringVar()

    # 初始化
    if complete_set["MaxTime"]:
        time_upper_var.set(str(param_dict["MaxTime"]))

    if complete_set["MinTime"]:
        time_lower_var.set(str(param_dict["MinTime"]))

    def check_time_upper():
        try:
            # 确保输入的是数字，才予以通过
            _ = int(time_upper_var.get())
        except ValueError:
            canvas.itemconfig(dot_2, fill="#FF0000")
            complete_set["MaxTime"] = False
            param_dict["MaxTime"] = None
            return

        param_dict["MaxTime"] = int(time_upper_var.get())
        complete_set["MaxTime"] = True
        canvas.itemconfig(dot_2, fill="#00FF00")

    def check_time_lower():
        try:
            _ = int(time_lower_var.get())
        except ValueError:
            canvas.itemconfig(dot_1, fill="#FF0000")
            complete_set["MinTime"] = False
            param_dict["MinTime"] = None
            return
        param_dict["MinTime"] = int(time_lower_var.get())
        complete_set["MinTime"] = True
        canvas.itemconfig(dot_1, fill="#00FF00")

    # 添加监听
    time_upper_var.trace("w", lambda *args: check_time_upper())
    time_lower_var.trace("w", lambda *args: check_time_lower())

    entry_image_2 = PhotoImage(
        file=relative_to_assets("entry_2.png"))
    entry_bg_2 = canvas.create_image(
        572.0,
        294.5,
        image=entry_image_2
    )
    entry_time_upperbound = Entry(
        bd=0,
        bg="#E6E6E6",
        fg="#000716",
        highlightthickness=0,
        textvariable=time_lower_var
    )
    entry_time_upperbound.place(
        x=522.0,
        y=270.0,
        width=100.0,
        height=47.0
    )

    entry_image_3 = PhotoImage(
        file=relative_to_assets("entry_3.png"))
    entry_bg_3 = canvas.create_image(
        892.0,
        294.5,
        image=entry_image_3
    )
    entry_time_lowerbound = Entry(
        bd=0,
        bg="#E6E6E6",
        fg="#000716",
        highlightthickness=0,
        textvariable=time_upper_var
    )
    entry_time_lowerbound.place(
        x=842.0,
        y=270.0,
        width=100.0,
        height=47.0
    )

    canvas.create_text(
        512.0,
        222.0,
        anchor="nw",
        text="时间下限",
        fill="#000000",
        font=("Microsoft YaHei", 24 * -1)
    )

    canvas.create_text(
        835.0,
        222.0,
        anchor="nw",
        text="时间上限",
        fill="#000000",
        font=("Microsoft YaHei", 24 * -1)
    )

    canvas.create_text(
        652.0,
        272.0,
        anchor="nw",
        text="秒",
        fill="#000000",
        font=("Consolas", 24 * -1)
    )

    canvas.create_text(
        970.0,
        272.0,
        anchor="nw",
        text="秒",
        fill="#000000",
        font=("Consolas", 24 * -1)
    )

    def ask_for_forced():
        fq = query_param.ParamForced(questions)
        window.wait_window(fq)
        result = fq.result
        if result is None:
            return
        complete_set["ForcedItem"] = True
        param_dict["ForcedItem"] = result
        canvas.itemconfig(dot_3, fill="#00FF00")

    def ask_for_repeat():
        rq = query_param.ParamRepeat(questions)
        window.wait_window(rq)
        result = rq.result
        if result is None:
            return
        complete_set["RepeatItem"] = True
        param_dict["RepeatItem"] = result
        canvas.itemconfig(dot_4, fill="#00FF00")

    button_image_1 = PhotoImage(
        file=relative_to_assets("button_1.png"))
    forced_btn = Button(
        image=button_image_1,
        borderwidth=0,
        highlightthickness=0,
        command=ask_for_forced,
        relief="flat"
    )
    forced_btn.place(
        x=829.0,
        y=356.0,
        width=138.0,
        height=52.0
    )

    button_image_2 = PhotoImage(
        file=relative_to_assets("button_2.png"))
    repeat_btn = Button(
        image=button_image_2,
        borderwidth=0,
        highlightthickness=0,
        command=ask_for_repeat,
        relief="flat"
    )
    repeat_btn.place(
        x=829.0,
        y=422.0,
        width=138.0,
        height=52.0
    )

    # 单击下一步，检查
    def confirm_check():
        for key in complete_set.keys():
            if not complete_set[key]:
                # 有还未填完的项
                messagebox.showinfo("Error", "还有未完成的项，请检查并确保所有筛选参数都正确填写。")
                return
        try:
            write_json("json/Condition.json", param_dict)
        except Exception as e:
            messagebox.showerror("Error", "写文件时发生错误。请确保未打开配置文件、参数填写合法，并重试。")
            print(e)
        filter.build_condition()
        # 下面就是处理的步骤，需要Success和Fail
        try:
            filter.process()
        except Exception as e:
            print(e)
            window.destroy()
            filter_fail.start_window(filename, filter)
            return
        filter.save_record()
        window.destroy()
        filter_success.start_window(filename, filter)

    button_image_3 = PhotoImage(
        file=relative_to_assets("button_3.png"))
    confirm_btn = Button(
        image=button_image_3,
        borderwidth=0,
        highlightthickness=0,
        command=confirm_check,
        relief="flat"
    )
    confirm_btn.place(
        x=700.0,
        y=655.0,
        width=138.0,
        height=52.0
    )

    canvas.create_text(
        434.0,
        138.0,
        anchor="nw",
        text="Step. 3",
        fill="#000000",
        font=("Consolas", 48 * -1)
    )

    canvas.create_text(
        722.0,
        134.0,
        anchor="nw",
        text="填写筛选参数",
        fill="#000000",
        font=("Microsoft YaHei", 40 * -1)
    )

    canvas.create_text(
        776.5,
        33.0,
        anchor="n",
        text=filter.filename,
        fill="#FFFFFF",
        font=("Microsoft YaHei", 24 * -1)
    )
    window.resizable(False, False)
    window.mainloop()


if __name__ == '__main__':
    from util.FileReader import read_source

    start_window("测试问卷1",
                 Filter(read_source(r"D:\WindStation\Documents\Pycharm\QuestionnaireFilter\Source\测试问卷1.xlsx"), "测试问卷",
                        True))
